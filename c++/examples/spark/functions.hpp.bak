#ifndef __FUNCTIONS_HPP__
#define __FUNCTIONS_HPP__

#include <jni.h>
#include <vector>
#include <map>
#include <iostream>

class FlatMap : public Facroty {
public:
	FlatMap(){};
	virtual ~FlatMap(){}

	virtual std::vector<std::string> flatMap(std::string t) = 0;
};

typedef FlatMap* createFlatMap();
typedef void destroyFlatMap(FlatMap* f);

class ReduceByKey : public Factory {
public:
	virtual int reduceByKey (int t1, int t2) = 0;
};

typedef ReduceByKey* createReduceByKey();
typedef void destroyReduceByKey(ReduceByKey* f);

class PairMap : public Factory {
public:
	virtual std::map<int, int> pairMap(std::string t) = 0;
};

typedef PairMap* createPairMap();
typedef void destroyPairMap(PairMap* f);


#endif // 
